/*
 * SPI.h
 *
 *  Created on: 28 Feb 2023
 *      Author: Alaa Wahba
 */

#ifndef INC_SPI_H_
#define INC_SPI_H_

//=======================
//       Includes
//=======================
#include "STM32_F103x6.h"
#include "GPIO.h"
#include "RCC.h"
#include "EXTI.h"

//================================================
//   User type definitions (structures)
//================================================

enum PollingMechanism{
	Pollingenable ,
	Pollingdisable
};

struct IRQ_source_t{
	uint8 TXE:1;
	uint8 RXNE:1;
	uint8 ERRI:1;
	uint8 RESERVED:5;
};

typedef struct{

	uint16 SPI_Mode;						//Specifies The operating Mode @ref SPI_MODE_Define
	uint16 Commuincation_Mode;			// Specifies The SPI Bidirectional Mode @ref SPI_Commuincation_Mode_define
	uint16 Data_Size;					// @ref Data_Size_Define
	uint16 Frame_Format;					// Determines LSB or MSB transmitted fist @ref SPI_Frame_Format
	uint16 BaudRate;						// Specifies the clock frequency of generated by SPI in Master Mode @ref SPI_BaudRate
	uint16 NSS;							// Sets the NSS wether by Hardware or by Software @ref SPI_NSS
	uint16 CLK_Polarity;					// @ref SPI_CLK_Polarity
	uint16 CLK_Phase;					// @ref SPI_CLK_Phase
	uint16 IRQ_Enable;					// @ref SPI_IRQ_enable
	void(*P_CallBackFun)(struct IRQ_source_t);			// The C function() that is called when IRQ is enabled.

}SPI_PinConfig_t;
//===============================================
//      Macros Configuration References
//===============================================

/*
 * @ref SPI_MODE_Define
 */
#define SPI_Mode_Slave 						(uint32)(0)
#define SPI_Mode_Master						(uint32)(1<<2)		//MSTR bit in CR1 register
/*
 * @ref SPI_Commuincation_Mode_define
 */
#define SPI_Direction_2Lines_RXTX			(uint32)(0)
#define SPI_Direction_2Lines_RX				(uint32)(1<<10)
#define SPI_Direction_1Line_RX				(uint32)(1<<15)
#define SPI_Direction_1Line_TX				(uint32)((1<<15) | (1<<14))
/*
 * @ref Data_Size_Define
 */
#define SPI_Data8							(uint32)(0)
#define SPI_Data16							(uint32)(1<<11)
/*
 * @ref SPI_Frame_Format
 */
#define SPI_Frame_LSB						(uint32)(1<<7)
#define SPI_Frame_MSB						(uint32)(0)
/*
 * @ref SPI_BaudRate
 */
#define SPI_BaudRate_2						(uint32)(000)
#define SPI_BaudRate_4						(uint32)(0b001<<3)
#define SPI_BaudRate_8						(uint32)(0b010<<3)
#define SPI_BaudRate_16						(uint32)(0b011<<3)
#define SPI_BaudRate_32						(uint32)(0b100<<3)
#define SPI_BaudRate_64						(uint32)(0b101<<3)
#define SPI_BaudRate_128					(uint32)(0b110<<3)
#define SPI_BaudRate_256					(uint32)(0b111<<3)

/*
 * @ref SPI_NSS
 */
/*#define SPI_NSS_SoftwareEN 					(uint32)(1<<9)
#define SPI_NSS_Hardware_Input				(uint32)(0)		//MutiMaster Mode
#define SPI_NSS_Hardware_Output				(uint32)(1<<2)
*/
#define SPI_NSS_Hard_Slave                                              (uint32)(0x00000000U)
#define SPI_NSS_Hard_Master_SS_output_enable                            (uint32)(1<<2)    //SPI_CR2 bit2
#define SPI_NSS_Hard_Master_SS_output_disable                           (uint32) (~(1<<2))   //SPI_CR2 bit2
//NSS is driven by SW (Master or slave)
#define SPI_NSS_Soft_NSSInternalSoft_Reset                              (uint32)(1<<9)
#define SPI_NSS_Soft_NSSInternalSoft_set                                (uint32)( (1<<9) | (1<<8))

/*
 * @ref SPI_CLK_Polarity
 */
#define SPI_CLK_Polarity_0					(uint32)(0)
#define SPI_CLK_Polarity_1					(uint32)(1<<1)
/*
 * @ref SPI_CLK_Phase
 */
#define SPI_CLK_Phase_1st					(uint32)(0)
#define SPI_CLK_Phase_2nd					(uint32)(1<<0)
/*
 * @ref SPI_IRQ_enable
 */
#define SPI_IRQ_EN_None						(uint32)(0)
#define SPI_IRQ_EN_TXEIE					(uint32)(1<<7)
#define SPI_IRQ_EN_RXNEIE					(uint32)(1<<6)
#define SPI_IRQ_EN_ERRIE					(uint32)(1<<5)
/*
 * @ref SPI_IRQ_LineNumber
 */
#define SPI1_IRQ_LineNumber			35
#define SPI2_IRQ_LineNumber			36




/*
* ===============================================
*      APIs Supported by "MCAL SPI DRIVER"
* ===============================================
*/

void SPI_init(SPI_PinConfig_t *SPI_pinConfig, SPI_Registers_t *SPIx);
void SPI_DeInit(SPI_Registers_t *SPIx);

void SPI_SendData(SPI_Registers_t *SPIx, uint16 *pData, enum PollingMechanism PollingEn );
void SPI_RecieveData(SPI_Registers_t *SPIx, uint16 *pData, enum PollingMechanism PollingEn );

void SPI_GPIO_SetPins(SPI_Registers_t *SPIx);
void SPI_RXTX(SPI_Registers_t *SPIx, uint16 *pData, enum PollingMechanism PollingEn);

#endif /* INC_SPI_H_ */
